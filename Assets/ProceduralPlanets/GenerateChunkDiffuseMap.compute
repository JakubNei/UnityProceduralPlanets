#pragma kernel main



#include "Planet.Compute.cginc"



Texture2D<float> _planetHeightMap;



Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float4> _grass;
SamplerState sampler_grass;

Texture2D<float4> _clay;
SamplerState sampler_clay;

Texture2D<float4> _rock;
SamplerState sampler_rock;

Texture2D<float4> _snow;
SamplerState sampler_snow;

Texture2D<float4> _tundra;
SamplerState sampler_tundra;


float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

int _slopeModifier;

float _heightMin;
float _heightMax;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float _mipMapLevel;


Texture2D<float4> _chunkWorldNormalMap;
RWTexture2D<float4> _chunkDiffuseMap;


struct MyBindingStruct
{
	float3 pos;
	int3 region;
};

float3 triPlanar(Texture2D tex, SamplerState samp, float3 pos, float3 normal, float scale)
{
	float3 blendWeights = pow(abs(normal), 5);
	blendWeights /= blendWeights.x + blendWeights.y + blendWeights.z;

	return
		blendWeights.x * tex.SampleLevel(samp, pos.yz * scale, 0).xyz +
		blendWeights.y * tex.SampleLevel(samp, pos.zx * scale, 0).xyz +
		blendWeights.z * tex.SampleLevel(samp, pos.xy * scale, 0).xyz;

	//return
	//	blendWeights.x * tex.SampleLevel(samp, pos.yz * scale, _mipMapLevel).xyz +
	//	blendWeights.y * tex.SampleLevel(samp, pos.zx * scale, _mipMapLevel).xyz +
	//	blendWeights.z * tex.SampleLevel(samp, pos.xy * scale, _mipMapLevel).xyz;
}

float3 triPlanarThreeSizes(Texture2D tex, SamplerState samp, float3 pos, float3 normal, float scale)
{
	return 
		triPlanar(tex, samp, pos, normal, scale) * 0.6 +
		triPlanar(tex, samp, pos, normal, scale * 0.3) * 0.3 +
		triPlanar(tex, samp, pos, normal, scale * 0.01) * 0.1;
}

float3 ramp(float v)
{
	return hsvToRgb(float3(clamp(v, 0, 1) / 1.35 + 0.25, 1, 1));
}


float3 GetGrass(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_grass, sampler_grass, pos, normal, 1);
	return float3(121, 136, 69) / float3(255, 255, 255); // grass
}
float3 GetClay(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_clay, sampler_clay, pos, normal, 1);
	return float3(139, 133, 75) / float3(255, 255, 255); // clay
}
float3 GetRock(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_rock, sampler_rock, pos, normal, 1);
	return float3(100, 100, 100) / float3(255, 255, 255); // rock
}
float3 GetSnow(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_snow, sampler_snow, pos, normal, 1);
	return float3(1, 1, 1); // white
}
float3 GetTundra(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_tundra, sampler_tundra, pos, normal, 1);
	return float3(0.5, 0.5, 0.5); // grey
}


struct BiomesResult
{
	float snowWeight;
	float tundraWeight;
	float rockWeight;
	float clayWeight;
	float grassWeight;
	float seaWeight;

};

BiomesResult CalculateBiomes(double3 pos, float3 dir, float slope, float altidute01)
{
	float3 biomeAdjustmentNoise = snoise_grad(pos / 50, 10, 1.4);
	//biomeAdjustmentNoise = 0;

	BiomesResult result;

	result.snowWeight = smoothstep(0.2, 0, slope) * (smoothstep(0.8, 1, abs(dir.z)) * 2 + altidute01 * 2);
	result.tundraWeight = smoothstep(0.8, 0, slope) * (smoothstep(0.5, 1, abs(dir.z)) + altidute01 + 0.01*biomeAdjustmentNoise.z);
	result.rockWeight = smoothstep(0.5, 1, slope)*5 + 0.003*biomeAdjustmentNoise.x;
	result.clayWeight = smoothstep(0, 0.2, slope)*0.3 + 0.02*biomeAdjustmentNoise.y;
	result.grassWeight = smoothstep(0.8, 0, slope) + 0.05*biomeAdjustmentNoise.z;	
	result.seaWeight = smoothstep(0.0105, 0.0095, altidute01) * 5;
	
	float sum = result.snowWeight + result.tundraWeight + result.rockWeight + result.clayWeight + result.grassWeight + result.seaWeight;

	result.snowWeight /= sum;
	result.tundraWeight /= sum;
	result.rockWeight /= sum;
	result.clayWeight /= sum;
	result.grassWeight /= sum;
	result.seaWeight /= sum;

	return result;
}


[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkDiffuseMap, id.xy);

	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);
	
	double height01 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r;
	height01 = height01 * (_heightMax - _heightMin) + _heightMin;
	double heightReal = height01 * _planetRadiusHeightMapMultiplier;
	heightReal += _planetRadiusStart;
	double3 pos = dir * heightReal;

	float3 triplanarPos = fmod(pos, 10);


	float4 worldNormalAndSlope = _chunkWorldNormalMap[id.xy];
	float3 worldNormal = UNPACK_NORMAL(worldNormalAndSlope.rgb);
	float slope = worldNormalAndSlope.w * 7;
	//slope = 0.2; // DEBUG

	BiomesResult biomes = CalculateBiomes(pos, dir, slope, height01);

	float3 color;

	if (biomes.snowWeight >= biomes.snowWeight && biomes.snowWeight >= biomes.rockWeight && biomes.snowWeight >= biomes.tundraWeight && biomes.snowWeight >= biomes.grassWeight && biomes.snowWeight >= biomes.clayWeight && biomes.snowWeight >= biomes.seaWeight)
		color = GetSnow(triplanarPos, worldNormal);
	else if (biomes.rockWeight >= biomes.snowWeight && biomes.rockWeight >= biomes.rockWeight && biomes.rockWeight >= biomes.tundraWeight && biomes.rockWeight >= biomes.grassWeight && biomes.rockWeight >= biomes.clayWeight && biomes.rockWeight >= biomes.seaWeight)
		color = GetRock(triplanarPos, worldNormal);
	else if (biomes.tundraWeight >= biomes.snowWeight && biomes.tundraWeight >= biomes.rockWeight && biomes.tundraWeight >= biomes.tundraWeight && biomes.tundraWeight >= biomes.grassWeight && biomes.tundraWeight >= biomes.clayWeight && biomes.tundraWeight >= biomes.seaWeight)
		color = GetTundra(triplanarPos, worldNormal);
	else if (biomes.grassWeight >= biomes.snowWeight && biomes.grassWeight >= biomes.rockWeight && biomes.grassWeight >= biomes.tundraWeight && biomes.grassWeight >= biomes.grassWeight && biomes.grassWeight >= biomes.clayWeight && biomes.grassWeight >= biomes.seaWeight)
		color = GetGrass(triplanarPos, worldNormal);
	else if (biomes.clayWeight >= biomes.snowWeight && biomes.clayWeight >= biomes.rockWeight && biomes.clayWeight >= biomes.tundraWeight && biomes.clayWeight >= biomes.grassWeight && biomes.clayWeight >= biomes.clayWeight && biomes.clayWeight >= biomes.seaWeight)
		color = GetClay(triplanarPos, worldNormal);
	else if (biomes.seaWeight >= biomes.snowWeight && biomes.seaWeight >= biomes.rockWeight && biomes.seaWeight >= biomes.tundraWeight && biomes.seaWeight >= biomes.grassWeight && biomes.seaWeight >= biomes.clayWeight && biomes.seaWeight >= biomes.seaWeight)
		color = float3(0, 0, 1); // sea
	else
		color = float3(1, 0, 0);

	
		

	// DEBUG
	//color = _grass.SampleLevel(sampler_grass, pos.yz, 0);
	//color = GetGrass(pos, normal);
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkWorldNormalMap, uv);
	//color = float3(1, 1, 1) * slope;
	//color = _chunkSlopeMap[id.xy].xyz;
	//color = float3(slopeXY, 0);
	//color = float3(slope > 0, 0, 0);
	//color = ramp(length(_chunkSlopeMap[id.xy].xyz));
	//color = float3(_chunkHeightMap[id.xy].x > 0 && _chunkHeightMap[id.xy].x < 0.5, 0, 0);
	//color = _chunkHeightMap[id.xy].xyz;
	//color = ramp(slope);
	//color = slope;
	//color = ramp(biomes.snowWeight);
	//color = ramp(lerp(0.8, 1, snoise(pos / 1000, 10, 1.5)));

	// SAFE
	//if (slope > 1) color = float3(1, 0, 0);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}