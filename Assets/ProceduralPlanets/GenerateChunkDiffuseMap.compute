#pragma kernel main



#include "Planet.Compute.cginc"



Texture2D<float> _planetHeightMap;



Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float4> _grass;
SamplerState sampler_grass;

Texture2D<float4> _clay;
SamplerState sampler_clay;

Texture2D<float4> _rock;
SamplerState sampler_rock;

Texture2D<float4> _snow;
SamplerState sampler_snow;

Texture2D<float4> _tundra;
SamplerState sampler_tundra;


float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

int _slopeModifier;

float _heightMin;
float _heightMax;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float _mipMapLevel;


Texture2D<float4> _chunkWorldNormalMap;
RWTexture2D<float4> _chunkDiffuseMap;


StructuredBuffer<float4> _craterSpherePositionRadius;



struct MyBindingStruct
{
	float3 pos;
	int3 region;
};

float3 triPlanar(Texture2D tex, SamplerState samp, float3 pos, float3 normal, float scale)
{
	float3 blendWeights = pow(abs(normal), 5);
	blendWeights /= blendWeights.x + blendWeights.y + blendWeights.z;

	return
		blendWeights.x * tex.SampleLevel(samp, pos.yz * scale, 0).xyz +
		blendWeights.y * tex.SampleLevel(samp, pos.zx * scale, 0).xyz +
		blendWeights.z * tex.SampleLevel(samp, pos.xy * scale, 0).xyz;

	//return
	//	blendWeights.x * tex.SampleLevel(samp, pos.yz * scale, _mipMapLevel).xyz +
	//	blendWeights.y * tex.SampleLevel(samp, pos.zx * scale, _mipMapLevel).xyz +
	//	blendWeights.z * tex.SampleLevel(samp, pos.xy * scale, _mipMapLevel).xyz;
}

float3 triPlanarThreeSizes(Texture2D tex, SamplerState samp, float3 pos, float3 normal, float scale)
{
	return 
		triPlanar(tex, samp, pos, normal, scale) * 0.6 +
		triPlanar(tex, samp, pos, normal, scale * 0.3) * 0.3 +
		triPlanar(tex, samp, pos, normal, scale * 0.01) * 0.1;
}

float3 ramp(float v)
{
	return hsvToRgb(float3(clamp(v, 0, 1) / 1.35 + 0.25, 1, 1));
}


float3 GetGrass(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_grass, sampler_grass, pos, normal, 1);
	return float3(121, 136, 69) / float3(255, 255, 255); // grass
}
float3 GetClay(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_clay, sampler_clay, pos, normal, 1);
	return float3(139, 133, 75) / float3(255, 255, 255); // clay
}
float3 GetRock(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_rock, sampler_rock, pos, normal, 1);
	return float3(100, 100, 100) / float3(255, 255, 255); // rock
}
float3 GetSnow(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_snow, sampler_snow, pos, normal, 1);
	return float3(1, 1, 1); // white
}
float3 GetTundra(float3 pos, float3 normal) {
	return triPlanarThreeSizes(_tundra, sampler_tundra, pos, normal, 1);
	return float3(0.5, 0.5, 0.5); // grey
}


[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkDiffuseMap, id.xy);

	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);
	
	double height01 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r;
	height01 = height01 * (_heightMax - _heightMin) + _heightMin;
	double heightReal = height01 * _planetRadiusHeightMapMultiplier;
	heightReal += _planetRadiusStart;
	double3 pos = dir * heightReal;

	float3 triplanarPos = fmod(pos, 10);


	float4 worldNormalAndSlope = _chunkWorldNormalMap[id.xy];
	float3 worldNormal = UNPACK_NORMAL(worldNormalAndSlope.rgb);
	float slope = worldNormalAndSlope.w * 7;
	//slope = 0.2; // DEBUG

	float altidute = height01;
	float3 biomeAdjustmentNoise = snoise_grad(pos / 50, 10, 1.4);
	//biomeAdjustmentNoise = 0;


	float snowWeight = smoothstep(0.2, 0, slope) * (smoothstep(0.8, 1, abs(dir.z)) * 2 + altidute * 2);
	float tundraWeight = smoothstep(0.8, 0, slope) * (smoothstep(0.5, 1, abs(dir.z)) + altidute + 0.01*biomeAdjustmentNoise.z);
	float rockWeight = smoothstep(0.5, 1, slope)*5 + 0.003*biomeAdjustmentNoise.x;
	float clayWeight = smoothstep(0, 0.2, slope)*0.3 + 0.02*biomeAdjustmentNoise.y;
	float grassWeight = smoothstep(0.8, 0, slope) + 0.05*biomeAdjustmentNoise.z;


	float craterOffset = 0;
	for (int i = 0; i < 100; ++i)
	{
		float4 c = _craterSpherePositionRadius[i];
		float w = smoothstep(c.w, 0, distance(c.xyz, pos));
		craterOffset = max(craterOffset, w);
	}
	clayWeight += craterOffset * 10;


	float3 color;

	if (snowWeight >= snowWeight && snowWeight >= rockWeight && snowWeight >= tundraWeight && snowWeight >= grassWeight && snowWeight >= clayWeight)
		color = GetSnow(triplanarPos, worldNormal);
	else if (rockWeight >= snowWeight && rockWeight >= rockWeight && rockWeight >= tundraWeight && rockWeight >= grassWeight && rockWeight >= clayWeight)
		color = GetRock(triplanarPos, worldNormal);
	else if (tundraWeight >= snowWeight && tundraWeight >= rockWeight && tundraWeight >= tundraWeight && tundraWeight >= grassWeight && tundraWeight >= clayWeight)
		color = GetTundra(triplanarPos, worldNormal);
	else if (grassWeight >= snowWeight && grassWeight >= rockWeight && grassWeight >= tundraWeight && grassWeight >= grassWeight && grassWeight >= clayWeight)
		color = GetGrass(triplanarPos, worldNormal);
	else if (clayWeight >= snowWeight && clayWeight >= rockWeight && clayWeight >= tundraWeight && clayWeight >= grassWeight && clayWeight >= clayWeight)
		color = GetClay(triplanarPos, worldNormal);
	else
		color = float3(1, 0, 0);

	if (altidute <= 0.01)
		color = float3(0, 0, 1); // sea

	// DEBUG
	//color = _grass.SampleLevel(sampler_grass, pos.yz, 0);
	//color = GetGrass(pos, normal);
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkWorldNormalMap, uv);
	//color = float3(1, 1, 1) * slope;
	//color = _chunkSlopeMap[id.xy].xyz;
	//color = float3(slopeXY, 0);
	//color = float3(slope > 0, 0, 0);
	//color = ramp(length(_chunkSlopeMap[id.xy].xyz));
	//color = float3(_chunkHeightMap[id.xy].x > 0 && _chunkHeightMap[id.xy].x < 0.5, 0, 0);
	//color = _chunkHeightMap[id.xy].xyz;
	//color = ramp(slope);
	//color = slope;
	//color = ramp(snowWeight);
	//color = ramp(lerp(0.8, 1, snoise(pos / 1000, 10, 1.5)));

	// SAFE
	//if (slope > 1) color = float3(1, 0, 0);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}