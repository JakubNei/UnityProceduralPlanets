#pragma kernel main

#include "Planet.Compute.cginc"


Texture2D<float> _planetHeightMap;

Texture2D<float3> _chunkNormalMap;
SamplerState sampler_chunkNormalMap;

Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float4> _chunkSlopeAndCurvatureMap;
SamplerState sampler_chunkSlopeAndCurvatureMap;

Texture2D<float4> _grass;
SamplerState sampler_grass;

Texture2D<float4> _clay;
SamplerState sampler_clay;

Texture2D<float4> _rock;
SamplerState sampler_rock;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

int _slopeModifier;

float _heightMin;
float _heightMax;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float _mipMapLevel;



RWTexture2D<float4> _chunkDiffuseMap;



struct MyBindingStruct
{
	float3 pos;
	int3 region;
};

float3 triPlanar(Texture2D tex, SamplerState samp, float3 pos, float3 normal, float scale)
{

	float3 blendWeights = pow(abs(normal), 5);
	blendWeights /= blendWeights.x + blendWeights.y + blendWeights.z;

	return
		blendWeights.x * tex.SampleLevel(samp, pos.yz * scale, _mipMapLevel).xyz +
		blendWeights.y * tex.SampleLevel(samp, pos.zx * scale, _mipMapLevel).xyz +
		blendWeights.z * tex.SampleLevel(samp, pos.xy * scale, _mipMapLevel).xyz;
}

float3 ramp(float v)
{
	return hsvToRgb(float3(clamp(v, 0, 1) / 1.35 + 0.25, 1, 1));
}


float3 GetGrass(float3 pos, float3 normal) {
	return triPlanar(_grass, sampler_grass, pos, normal, 1);
	return float3(121, 136, 69) / float3(255, 255, 255); // grass
}
float3 GetClay(float3 pos, float3 normal) {
	return triPlanar(_clay, sampler_clay, pos, normal, 1);
	return float3(139, 133, 75) / float3(255, 255, 255); // clay
}
float3 GetRock(float3 pos, float3 normal) {
	return triPlanar(_rock, sampler_rock, pos, normal, 1);
	return float3(100, 100, 100) / float3(255, 255, 255); // rock
}
float3 GetSnow(float3 pos, float3 normal) {
	return float3(1, 1, 1); // white
}
float3 GetTundra(float3 pos, float3 normal) {
	return float3(0.5, 0.5, 0.5); // grey
}


[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkDiffuseMap, id.xy);

	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);
	
	double height01 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r;
	height01 = height01 * (_heightMax - _heightMin) + _heightMin;
	double heightReal = height01 * _planetRadiusHeightMapMultiplier;
	heightReal += _planetRadiusStart;
	heightReal /= 10;
	double3 pos = dir * heightReal;

	float3 triplanarPos = fmod(pos, 10);

	float3 normal = UNPACK_NORMAL(_chunkNormalMap[id.xy]);

	float2 slopeXY = _chunkSlopeAndCurvatureMap[id.xy].xy;
	float slope = length(slopeXY);

	float altidute = height01;
	float distanceToPoles = smoothstep(0.4, 1, abs(dir.z));
	float snowBiomeWeight = altidute + distanceToPoles + snoise(dir * 100, 5, 2) * 0.1;
	float snowParticleWeight = snowBiomeWeight * smoothstep(0.5, 0, slope);

	float3 color;


	if (snowParticleWeight > 1.5)
		color = GetSnow(triplanarPos, normal);
	else if(slope > 0.3)
		color = GetRock(triplanarPos, normal);
	else {
		if (snowBiomeWeight > 1.2)
			color = GetTundra(triplanarPos, normal);
		else if (slope < 0.25)
			color = GetGrass(triplanarPos, normal);
		else
			color = GetClay(triplanarPos, normal);
	}


		


	// DEBUG
	//color = _grass.SampleLevel(sampler_grass, pos.yz, 0);
	//color = GetGrass(pos, normal);
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkNormalMap, uv);
	//color = float3(1, 1, 1) * slope;
	//color = _chunkSlopeAndCurvatureMap[id.xy].xyz;
	//color = float3(slopeXY, 0);
	//color = float3(slope > 0, 0, 0);
	//color = _chunkSlopeAndCurvatureMap[id.xy].xyz;
	//color = float3(_chunkHeightMap[id.xy].x > 0 && _chunkHeightMap[id.xy].x < 0.5, 0, 0);
	//color = _chunkHeightMap[id.xy].xyz;
	//color = ramp(slope);

	// SAFE
	//if (slope > 1) color = float3(1, 0, 0);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}