#pragma kernel parentExists
#pragma kernel parentDoesNotExist

#include "Planet.Compute.cginc"



Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

float _slopeModifier;

Texture2D<float4> _parentChunkSlopeAndCurvatureMap;
SamplerState sampler_parentChunkSlopeAndCurvatureMap;
float2 _parentUvStart;

int _generation;
int _numberOfVerticesOnEdge;

RWTexture2D<float4> _chunkSlopeAndCurvatureMap;



float2 getSlope(int2 idXy, int w, int h)
{
	int3 off = int3(-1, 0, 1);
	int2 s11pos = idXy;

	int size = (_generation + 1) * 4;

	size = min(size, w / (_numberOfVerticesOnEdge - 1));
	size = 1;

	//DEBUG
	//size = 5;

	s11pos = max(s11pos, int2(size, size));
	s11pos = min(s11pos, int2(w - 1 - size, h - 1 - size));

	float sx = 0;
	float sy = 0;

	//for (int i = 1; i <= size; i++) 
	{
		int i = 1;

		sx += _chunkHeightMap[s11pos + int2(i, 0)].r;
		sx -= _chunkHeightMap[s11pos - int2(i, 0)].r;

		sy += _chunkHeightMap[s11pos + int2(0, i)].r;
		sy -= _chunkHeightMap[s11pos - int2(0, i)].r;
	}


	return float2(sx, sy);
	return float2(sx, sy) / size / size * 7;
}

[numthreads(16, 16, 1)]
void parentExists(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_chunkSlopeAndCurvatureMap.GetDimensions(w, h);
	float2 uv = id.xy / float2(w - 1, h - 1);

	double2 childSlope = length(getSlope(id.xy, w, h));
	childSlope *= _slopeModifier * 10;

	float2 parentSlope = _parentChunkSlopeAndCurvatureMap.SampleLevel(sampler_parentChunkSlopeAndCurvatureMap, uv / 2.0 + _parentUvStart, 0).xy;


	float2 slope;
	//slope = lerp(parentSlope, childSlope, 0.2);
	//slope = normalize(childSlope) * length(parentSlope);
	slope = _slopeModifier < 600 ? childSlope : parentSlope;
	//slope = parentSlope;

	_chunkSlopeAndCurvatureMap[id.xy] = float4(slope, 0, 0);
}


[numthreads(16, 16, 1)]
void parentDoesNotExist(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_chunkSlopeAndCurvatureMap.GetDimensions(w, h);

	float2 slope = getSlope(id.xy, w, h);
	slope *= _slopeModifier * 10;

	_chunkSlopeAndCurvatureMap[id.xy] = float4(slope, 0, 0);
}