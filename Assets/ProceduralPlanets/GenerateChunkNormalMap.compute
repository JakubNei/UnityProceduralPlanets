#pragma kernel main

#include "Planet.Compute.cginc"


Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

int _numberOfVerticesOnEdge;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

float _heightMin;
float _heightMax;

RWTexture2D<float4> _chunkNormalMap;
//RWTexture2D<float4> _chunkTangentNormalMap;
RWTexture2D<float4> _chunkSlopeMap;


double3 positionAt(float2 uv)
{
	float3 unitCubePos = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);

	double3 dir = unitCubeToUnitSphere(unitCubePos);

	double height = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r;
	height = height * (_heightMax - _heightMin) + _heightMin;
	height *= _planetRadiusHeightMapMultiplier;
	height += _planetRadiusStart;

	return dir * height;
}


[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_chunkHeightMap.GetDimensions(w, h);
	float2 uv = id.xy / float2(w - 1, h - 1);

	float offset = 0.05;
	double3 c00 = positionAt(uv);
	double3 c10 = positionAt(uv + float2(offset, 0));
	double3 c01 = positionAt(uv + float2(0, offset));

	double3 tangent = normalize(c10 - c00);
	double3 bitangent = normalize(c01 - c00);

	double3 worldNormal = cross(tangent, bitangent);


	//DEBUG
	//worldNormal = float3(0.5, 0.5, 1);
	//worldNormal = float3(1, 0, 0);
	//worldNormal = normal;

	worldNormal = normalize(worldNormal);
	_chunkNormalMap[id.xy] = float4(PACK_NORMAL(worldNormal), 1);

	

	float3 unitCubePos = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);

	double3 dir = unitCubeToUnitSphere(unitCubePos);

	_chunkSlopeMap[id.xy] = float4(1 - dot(worldNormal, dir), 0, 0, 0);
}