#pragma kernel main

#include "Planet.Compute.cginc"


Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

int _numberOfVerticesOnEdge;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

float _heightMin;
float _heightMax;

RWTexture2D<float4> _chunkNormalMap;
//RWTexture2D<float4> _chunkTangentNormalMap;
RWTexture2D<float4> _chunkSlopeMap;


double3 calculatePositionAt(float2 uv)
{
	float3 unitCubePos = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);

	double3 dir = unitCubeToUnitSphere(unitCubePos);

	double height = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r;
	height = height * (_heightMax - _heightMin) + _heightMin;
	height *= _planetRadiusHeightMapMultiplier;
	height += _planetRadiusStart;

	return dir * height;
}

double3 calculatePixelNormal(uint2 id)
{
	int w, h;
	_chunkHeightMap.GetDimensions(w, h);
	const int2 maxId = int2(w - 1, h - 1);
	const float2 uv = id.xy / float2(w - 1, h - 1);
	const float offset = 0.05;
	float3 normal = float3(0, 0, 0);
	int count = 0;

	//   /\ y
	//   
	//    ---- p12 ----
	//   |             |
	// p01 --- p11 --- p21
	//   |             |
	//    ---- p10 ----    ---> x	

	const double3 p11 = calculatePositionAt(uv);
	const double3 p01 = calculatePositionAt(uv + float2(-offset, 0));
	const double3 p12 = calculatePositionAt(uv + float2(0, +offset));
	const double3 p21 = calculatePositionAt(uv + float2(+offset, 0));
	const double3 p10 = calculatePositionAt(uv + float2(0, -offset));

	const double3 p12_p11 = normalize(p12 - p11);
	const double3 p01_p11 = normalize(p01 - p11);
	const double3 p10_p11 = normalize(p10 - p11);
	const double3 p21_p11 = normalize(p21 - p11);

	if (id.x > 0)
	{
		if (id.y < maxId.y)
		{
			normal += cross(p12_p11, p01_p11);
			++count;
		}
		
		if (id.y > 0)
		{
			normal += cross(p01_p11, p10_p11);
			++count;
		}
	}

	if (id.x < maxId.x)
	{
		if (id.y < maxId.y)
		{
			normal += cross(p21_p11, p12_p11);
			++count;
		}

		if (id.y > 0)
		{
			normal += cross(p10_p11, p21_p11);
			++count;
		}
	}

	return normalize(normal / count);
}


[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	double3 worldNormal = calculatePixelNormal(id.xy);

	//DEBUG
	//worldNormal = float3(0.5, 0.5, 1);
	//worldNormal = float3(1, 0, 0);
	//worldNormal = normal;
	
	_chunkNormalMap[id.xy] = float4(PACK_NORMAL(worldNormal), 1);
	

	int w, h;
	_chunkHeightMap.GetDimensions(w, h);
	int2 maxId = int2(w - 1, h - 1);
	float2 uv = id.xy / float2(w - 1, h - 1);

	float3 unitCubePos = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);

	double3 dir = unitCubeToUnitSphere(unitCubePos);

	_chunkSlopeMap[id.xy] = float4(1 - dot(worldNormal, dir), 0, 0, 0);
}