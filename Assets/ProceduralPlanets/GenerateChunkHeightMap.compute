#pragma kernel main



#include "Planet.Compute.cginc"



Texture2D<float> _planetHeightMap;
SamplerState sampler_planetHeightMap;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

float _heightMin;
float _heightMax;

float _slopeModifier;

//bool _hasParent;
//float2 _parentUvStart;
//Texture2D<float> _parentChunkHeightMap;
//SamplerState sampler_parentChunkHeightMap;

RWTexture2D<float> _chunkHeightMap;


StructuredBuffer<float4> _craterSpherePositionRadius;



float calculateHeightAt(float2 uv)
{
	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);

	float2 heightMapUv = dirFromCenterToBaseMapUv(dir);
	
	float height = sampleCubicFloat(_planetHeightMap, heightMapUv);
	//double height = sampleCubicDouble(_planetHeightMap, heightMapUv);
	//double height = _planetHeightMap.SampleLevel(sampler_planetHeightMap, heightMapUv, 0);
	//double height = getProceduralHeight01(dir);

	
	float craterOffset = 0;
	for (int i = 0; i < 100; ++i)
	{
		float4 c = _craterSpherePositionRadius[i];
		float w = smoothstep(c.w, 0, distance(c.xyz, dir));
		craterOffset = max(craterOffset, w);
	}
	craterOffset -= height;

	return height;
}


[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkHeightMap, id.xy);

	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);

	float height = calculateHeightAt(uv);

	float off = 0.003 * _slopeModifier;
	float slope = 
		abs(height - calculateHeightAt(uv + float2(off, 0))) +
		abs(height - calculateHeightAt(uv + float2(0, off)));


	float3 pos = dir * 10;
	double n = 1;
	double amp = 1;
	for (int i = 0; i < 10; i++)
	{
		n += snoise(pos) * amp;
		pos *= 1.5;
		amp /= 1.3;
	}
	height += n * slope;

	/*float3 pos = dir;
	double n = 1;
	double amp = 1;
	for (int i = 0; i < 30; i++)
	{
		n += snoise(pos) * amp;
		pos *= 1.5;
		amp /= 1.3;
	}
	height += n * slope;*/

	//height = (height - _heightMin) / (_heightMax - _heightMin);


	height = clamp(height, 0, 1);
	_chunkHeightMap[id.xy] = height;
}