#pragma kernel main

#include "Planet.Compute.cginc"



Texture2D<float> _planetHeightMap;
SamplerState sampler_planetHeightMap;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

float _heightMin;
float _heightMax;



bool _hasParent;
float2 _parentUvStart;
Texture2D<float> _parentChunkHeightMap;
SamplerState sampler_parentChunkHeightMap;

RWTexture2D<float> _chunkHeightMap;



[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkHeightMap, id.xy);

	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);

	float2 heightMapUv = dirFromCenterToBaseMapUv(dir);

	float height = sampleCubicFloat(_planetHeightMap, heightMapUv);
	//double height = sampleCubicDouble(_planetHeightMap, heightMapUv);
	//double height = _planetHeightMap.SampleLevel(sampler_planetHeightMap, heightMapUv, 0);
	//double height = getProceduralHeight01(dir);

	//<<<<<<<<<<< uncoment once slope is fixed
	height += snoise(dir * 1000, 20, 1.2) * 0.0001; // high frequency small amplitude noise, to hide planet height map sampling artefacts

	height = (height - _heightMin) / (_heightMax - _heightMin);

	//height = clamp(height, 0, 1);
	/*
	dir *= 100;
	float amp = 0.01;
	for (int i = 0; i < 30; i++)
	{
		height += snoise(dir) * amp;
		dir *= 1.2;
		amp /= 1.2;
	}*/

	// DEBUG
	//height = uv.x;
	//height = 0.5;

	height = clamp(height, 0, 1);
	_chunkHeightMap[id.xy] = height;
}